import NueralNet
import numpy as np
import random

from NueralNet import NeuralNetwork

board = [' ' for x in range(10)]

def insertLetter(letter, pos):
    board[pos] = letter

def spaceIsFree(pos):
    if board[pos] == ' ':
        return True
    else:
        return False

def printBoard(board):
    print('   |   |')
    print(' ' + board[1] + ' | ' + board[2] + ' | ' + board[3])
    print('   |   |')
    print('-----------')
    print('   |   |')
    print(' ' + board[4] + ' | ' + board[5] + ' | ' + board[6])
    print('   |   |')
    print('-----------')
    print('   |   |')
    print(' ' + board[7] + ' | ' + board[8] + ' | ' + board[9])
    print('   |   |')

def isWinner(bo, le):
    return (bo[1] == le and bo[2] == le and bo[3] == le) or (bo[4] == le and bo[5] == le and bo[6] == le) or (bo[7] == le and bo[8] == le and bo[9] == le) or (bo[1] == le and bo[4] == le and bo[7] == le) or (bo[2] == le and bo[5] == le and bo[8] == le) or (bo[3] == le and bo[6] == le and bo[9] == le) or (bo[1] == le and bo[5] == le and bo[9] == le) or (bo[3] == le and bo[5] == le and bo[7] == le)

def playerMove():
    run = True
    while run:
        move = input('Please Select a Position to Place an X (1-9)')
        try:
            move = int(move)
            if 0 < move < 10:
                if spaceIsFree(move):
                    run = False
                    insertLetter('X', move)
                else:
                    print('That Space is Occupied')
            else:
                print('Please Select a Number Within the Range')
        except:
            print('Please Type a New Selection')

def selectRandom(board):
    pass

def isBoardFull(board):
    if board.count(' ')>1:
        return False
    else:
        return True

def main():
    print('Welcome to Tic Tac Toe!')

    # Intialize a single neuron neural network.
    neural_network = NueralNet.NeuralNetwork()

    print "Random starting synaptic weights: "
    print neural_network.synaptic_weights

    # Read Training Set From File
    # TO DO


    # Train the neural network using a training set.
    # Do it 10,000 times and make small adjustments each time.
    # neural_network.train(training_set_inputs, training_set_outputs, 10000)

    print "New synaptic weights after training: "
    print neural_network.synaptic_weights

    # Test the neural network with a new situation.
    # print "Considering new situation [1, 0, 0] -> ?: "
    # print neural_network.think(array([1, 0, 0]))

    while not (isBoardFull(board)):
        weights = neural_network.synaptic_weights.tolist()
        if not (isWinner(board, 'O')):
            playerMove()
            printBoard(board)
        else:
            print('O\'s Win!')
            break

        if not (isWinner(board, 'X')):

            run = True
            while run:
                move = weights.index(max(weights))+1
                if spaceIsFree(move):
                    run = False
                    insertLetter('O', move)
                    printBoard(board)
                else:
                    print('That Space is Occupied')
                    print(weights)
                    weights.insert(weights.index(max(weights)), -9)
                    weights.remove(max(weights))
                    print(weights)

        else:
            print('X\'s Win!')
            break

    if isBoardFull(board):
        print('Tie Game!')
main()